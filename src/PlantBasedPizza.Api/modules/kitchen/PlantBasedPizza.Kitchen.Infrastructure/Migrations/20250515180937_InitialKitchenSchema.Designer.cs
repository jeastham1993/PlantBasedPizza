// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlantBasedPizza.Kitchen.Infrastructure;

#nullable disable

namespace PlantBasedPizza.Kitchen.Infrastructure.Migrations
{
    [DbContext(typeof(KitchenDbContext))]
    [Migration("20250515180937_InitialKitchenSchema")]
    partial class InitialKitchenSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlantBasedPizza.Kitchen.Core.Adapters.RecipeAdapter", b =>
                {
                    b.Property<int>("RecipeAdapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecipeAdapterId"));

                    b.Property<string>("KitchenRequestOrderIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("RecipeIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "recipeIdentifier");

                    b.HasKey("RecipeAdapterId");

                    b.HasIndex("KitchenRequestOrderIdentifier");

                    b.ToTable("RecipeAdapter");

                    b.HasAnnotation("Relational:JsonPropertyName", "recipes");
                });

            modelBuilder.Entity("PlantBasedPizza.Kitchen.Core.Entities.KitchenRequest", b =>
                {
                    b.Property<string>("OrderIdentifier")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "orderIdentifier");

                    b.Property<DateTime?>("BakeCompleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "bakeCompleteOn");

                    b.Property<string>("KitchenRequestId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "kitchenRequestId");

                    b.Property<DateTime>("OrderReceivedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "orderReceivedOn");

                    b.Property<int>("OrderState")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "orderState");

                    b.Property<DateTime?>("PrepCompleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "prepCompleteOn");

                    b.Property<DateTime?>("QualityCheckCompleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "qualityCheckCompleteOn");

                    b.HasKey("OrderIdentifier");

                    b.ToTable("kitchen", (string)null);
                });

            modelBuilder.Entity("PlantBasedPizza.Kitchen.Core.Adapters.RecipeAdapter", b =>
                {
                    b.HasOne("PlantBasedPizza.Kitchen.Core.Entities.KitchenRequest", null)
                        .WithMany("Recipes")
                        .HasForeignKey("KitchenRequestOrderIdentifier");
                });

            modelBuilder.Entity("PlantBasedPizza.Kitchen.Core.Entities.KitchenRequest", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
