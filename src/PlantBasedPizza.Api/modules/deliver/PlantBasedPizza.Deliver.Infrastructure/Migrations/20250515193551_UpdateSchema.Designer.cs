// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlantBasedPizza.Deliver.Infrastructure;

#nullable disable

namespace PlantBasedPizza.Deliver.Infrastructure.Migrations
{
    [DbContext(typeof(DeliveryDbContext))]
    [Migration("20250515193551_UpdateSchema")]
    partial class UpdateSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlantBasedPizza.Deliver.Core.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "addressId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "addressLine1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "addressLine2");

                    b.Property<string>("AddressLine3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "addressLine3");

                    b.Property<string>("AddressLine4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "addressLine4");

                    b.Property<string>("AddressLine5")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "addressLine5");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "postcode");

                    b.HasKey("AddressId");

                    b.ToTable("Address");

                    b.HasAnnotation("Relational:JsonPropertyName", "deliveryAddress");
                });

            modelBuilder.Entity("PlantBasedPizza.Deliver.Core.Entities.DeliveryRequest", b =>
                {
                    b.Property<string>("OrderIdentifier")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "orderIdentifier");

                    b.Property<DateTime?>("DeliveredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "deliveredOn");

                    b.Property<int>("DeliveryAddressAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "driver");

                    b.Property<DateTime?>("DriverCollectedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "driverCollectedOn");

                    b.HasKey("OrderIdentifier");

                    b.HasIndex("DeliveryAddressAddressId");

                    b.ToTable("DeliveryRequests", (string)null);
                });

            modelBuilder.Entity("PlantBasedPizza.Deliver.Core.Entities.DeliveryRequest", b =>
                {
                    b.HasOne("PlantBasedPizza.Deliver.Core.Entities.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
